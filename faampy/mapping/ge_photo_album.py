#!/usr/bin/env python

"""
Photo album creator for google-earth from georeferenced photos.
Script produces  a kmz files for google-earth with all the photos
in the input folder. The images need to contain GPS location information.
This kind of information can be added to the image files using a tool
like gpscorrelate and a gpx file which contains the track of the flight.

"""

import os
import simplekml
import sys
import datetime as dt
#import pyexiv2 as pex
import exifread as pex
import tempfile


_CAMERA_ICON='\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\x00\x06bKGD\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07tIME\x07\xe0\x0b\n\x0f;\x14\xef\xc9\x1c/\x00\x00\x00\x19tEXtComment\x00Created with GIMPW\x81\x0e\x17\x00\x00\x06XIDATX\xc3\xad\x97ml\xd5W\x1d\xc7?\xbfs\xfe\xff{\xdb\x8eAK\xdb\\h)\xb4\x05&d\xc3\xd1\xe9\xa2\x93\xb0\xb87M\x9c\xca\xa2\x06\x90:\x8c\x04t*s4Q\xb2\xa8/5\xf1\xc5^\xac\x8d\t\xc6\x87\x99 j\xf7\xa0\xdb\xd4\xcd(\x89\x1b\no\x0c\n\xdd\x18kd\x0c:\xba\x16\xba\x16\xdaR\xd6\xf6\xde\xfb?\xe7\xe7\x8b\xfb\xd4{{/\x0f\xd3or\xde\x9c\xff\xffw~\x0f\xe7\xfb{8\xc2\r\xd0\xd7\xbc\x81\x1d\xc3\xa7\x00\xf8c\xeb\xbd\xdb\x8c\xd0)\xd0!J\xab\x88\xd4\x02\xa8\xea\xa4\n\x83\n\'\xbdrx\xcb\xe0\xf1gKe+A*}\xf8M\xd3\x9d|i\xe44}-\x1fN,\x0e\xaa\x9e\xb0";\r\x82\x11A\xc4 HAZAQT=^\x15\x8f\xe2T\x0f]\x8d\xe6\xf6\xef\x18z}4w\xd6M\x1b\xf0\xfb\x96\x8d|a\xa8\x9f?\xb5\xdd\xdb\x13"\xfb\xac\x18\x8c\xb1\x19\xe5\x08"9\xd1y\x16\xa0h\xd6\x10\xaf\x8a\xf7\x0e\xa7\x9e4\xda\xfb\xd9\xf3\xc7\xbbsg\xde\xd0\x80\xa3\x1f\xfa$\xc3\xd7\xae4\xde\x1e\xab\xea\x0f\x91&c\x02l9\xaf+a^4\x9c*\xdeG\xa4\xd1\x91\xe9\xd4\xdc\xc6\xe6EK\xc76\xff\xe7He\x03\x8e\xdeq?\xa33S\xed5A\xec\xad@\x8c\tl\x80\xb9Y\xc5\x15\x0c\xf1\xea\x89\\D\xa4\xde\xcfD\xa9\xb5\x89\x9a%\xe76\x9f\xf9\xc7B\x03\x9ek\xde@\xda\xfb\xc6\xdax\xf5\xa5P\xac\xb1&\xab\\nH\x97\xca\x16\x00\xaa\xe0\xd5\xe3|DZ\x9d\x9fL\xce.\x0b\x8d\x19\xdb\x9a%\xa7\x018\xd8\xb4\x8e\xad\xc3\xa7X\x1c\xab\xee\x0f0\xc6\x88E$\xe3\xb5jn\xe9-\xae\x8c\x1c\x02"\x82\x11K\x801\x8bc\xd5\xfd[\x87Oq\xb0i]\xb1[\x7fXyOO\x95\xd8}\x81\r0&\x1b\xf6r~y\x8f\x9f\x9d\xcb9X\xe4\xb1\xa9\x8a#AP!\x1e\x8a\xf7\x99\xeb\x98S\xd7\xfb\xd0\x85\x13\xdd\x00\xf2\xab\xc4:@\x12\rU5\x97b&\xc0H\x86\xed\xe5\xe0#G\xeb\xa3_a\xd5c\xbb\x10c\x16\xf0\xf9\xbd\x97\xff\xc6\xe9\xbd\xdf\xc7V\xc5\xcb\xcb\xab\xe2\xd5\x91\xf2\x11\xe3s3\xcb@G\xed\x0b\xef\x8f\xb3k\xe9\x8a\x9f\x84\x98\xbb\xad\xc9)\x97\xcc\x1d\x8a\xa0\xde\xa3\x91C\xbd\'\xac\xaf\xe3\xee\x83O"\xd6"\xc6,X\x8b\xd6\xadf\xea_\xaf3;\xf8nF\x0e\xc0H\xfe.\xf2nyOhMb\xdb\xc8\x1b/\x08\xc0K-\x1d\x1a\xb7\x01F\x02\xcc<\xc6\xdb\xdbjh\xff\xf6#\xc4\x977\x82Bu\xfbJn[\xdbv]\xea%/\xbe\xc7\xf4ko\x82\x11R\x97\'\x18\xecy\x8a\xd4\xf8\x95</=\x8a\xd7\x88\xa4\x8b\xf8\xcc\xd0I\x91\xe7\x9a6l[d\x83gB\x1bb\xa4\x10V\x9fLq\xff\xe9W\x08k\x97\xf0\xbf@\x9d\xe3\xd5\xf6O v\xde\xd9\xeaI\xbb4\xd7\\\xb4=\x08\xa1\xd3 \x88\x16R\x07\xc0\xc6c\xd7U\x1e]\x9df\xe2\xd8qT=u\x1f\xff\x08a}]\xf9Rk-\xb1\xfaZ\xd2\x13S\x85=\x05\x83\x10Bg \xd0\x91KX-am%\x0c\xec\xff\x01C\xbf|\xbah\xafi\xfb\x16\xee:\xf0\xa3\xf2QP\x8f\xaa\xce\xdf\xc8\xa5`G\x80\xd2*\xf9\xd2\xa57\xecSo|\xf3\xbb\\\xfc\xddK\xb4>\xba\x8b\x96]\xdb\xc1\x18F\xfa^\xe4\xfc\x93?%=1EG\xdf\x81\xf25I\xfd\xc2\x12\xac\xb4\x06\xa8\xd6\xaaj\xc6\xe3\xa2\xf4[\x18\x81\x99\xf3\x17\x18\xee{\x915\xdf{\x8c\xd5\xfb\xbf\x91\xdf_\xfd\xf8^\xc2\xfa:\x06\x1e\xff!S\'N\xb1\xe4\x9e\r%\x11(\x89g\xb6X\xa1ZkT\xb4\xa0\xabP\xf6\xca\xe9g\xec\xafG\x00\xa5\xbd{\xcf\x82o+\xf7t!"\x8c\x1f\xfe{\x85\xc60o\xe5\xb6D1x\x9d\xcc\xf8_RJ\xcbX\xe0f\xe6PU$\x0c\xcb\x13.\x0c\x88fg\xcbV\xc1\xd2\xb3\x15\x05\xaf\x93\xc6\xa1\x83>\xf7C\xbe\xb3S\xc2\x87\x0c\x16w\xdc\t\xc60\xfe\xca\xb1\x05\xdf\xa6N\x9c\xc2%S,\xdexW\x19\x12Rt\xb6\xe6\x86\x16t\xd0x\xf4df\x83\xf9\xbf\x94\xcd\x81\x86\x076Q\xdd\xd6\xc2k_\xfb\x0e\xd3o\x9e)\xe2\xc6\xbf\x1f\xdeK,\xd1\xc0\xf2\xcf}\xaaBg,,_0\xe2d\x90\x8c\xdc\xe1*\xf1\xbb\r\x82\x8a)K\xbe\xf9\xb8\xef/}\x1c\xdd\xfc\x10\xc76m\xa1\xa6m\x05b,\xef\xbf=HXW\xcb\xa6#\xcfWHC\xe6\xa5\xa1dF7\xefIF\xee\xb0\x00<\x9fX\xafq\x13b\xe75\x18\x11\xa1s\xe8DEC\xdey\xea\xb7\\>\xf6O\xd4{\xea\xef\xfb(\xad\x8f|\xb9$\x8b\nxu\xc3\x03\xa4&&\x0b\\\xf2\x9e\xa4O\xf3\xf9\xd1\x01\t\x00\x92\xde\x1d\n\x8c\xdd\x89\x92\xef\x84>\x9dF\xbd/\xd3\xf52X\xb5\xbb\x8bU\xbb\xbbn\xaa\x1c\xa7\xa6\xa7\xf3\x97\xeaUqx\x92\xde\x1d\x02\x90\x03\xf5mx\xaf\x89\xe5a\xf5\xa5\x98\xcd\xce\x7f\xd9"\x14K4\xf2\xb1g~v\xc3\x06T\ts#\x978\xfe\xc5\xafs\xed\xed\xc1l\x7fU\x9c*)\x17q1=\xbb\xcc\x18\x19\xcd\xc7\xec\xd7\rkzn\x0fb\xfbl\xc9<\xe0\xe6\xe6\xd0T\xfa\x03\x19 A\x80\xad\xa9.\x9a\x07\x9c:\xa6\xa3T\xef\xc3\xe3g\xbb\xf3\x15\xf1\xc7u\xab\xf8\xd6\xc4;\xf45\xde1\\c\xc3&+&3\x92\xfd\x1f\xa1\xaa8\xf5\xcc\xb8\xf4\xc8\x8e\xb13\xcd9\x9dy-?_\xda\xce\x9c\x8b\x1a\x13\xb1\xeaKqc\x8d\x11Sq2\xbaUd&!O\xd2;?\x9a\x9a]Ve\x83\xb1\xaf^9\xb7\xb0\xe3\xbc\x9cX\xcf\xbb\xe9\xd9\xf6Z\x1b{+n\x02Sx\x05}@\xaf\xb3\x9d\xd0\xab\x92\xf4\x91\x9ft\xa9\xb5+\xc2\xeas\x9f\x1e\x1d\xa8\xdc\xf2\xfe\xdc\xb8\x9e\xb3\xe9\x99\xc6\x86 \xec\xaf\xb6a\x93\x11\xc9NI\x92\x1b\xd4*\x1a\xa4\x85a\x0e\xb2\xd5\xce\xab2\xeb\xd2#\xe3Qz\xe3\x9a\xb0f\xec\xc1\xb1\x81"\x99\x059\xf6\xe0\xd8\x00qc\xc6\xba\xc6\xcf6_\x8dR\xbdI\xe7\x88\xd4\xe3}\x86\xc1EuM\x8b\xcb,\x90}\r)\x91z\x92\xceq5J\xf5v\x8d\x9fm\x8e\x1b\xb3@\xf9u_\x1b=\xb5+\xe9\x9e\xbc@OmK\xa2\xde\xc6\x9f\x08\x8d\xec\x8c\x89\xcd\xbe\r\xb3\x89Z\xf48%\xdfhR\xeaH{=t\xd9%\xf7wO\x0e\x8d\xe6\xce\xba\xa5\xd7q\xa9!\x00\xbfX\xda\xb6-nl\xa7\x85\x0e\x11i\x85\xcc\xf3\x1ctRU\x07\x1d\x9cLzwx\xcf\x95\xf3\xcf\x96\xcaV\xc2\x7f\x01\x02\x82nS\xa5\xe5nn\x00\x00\x00\x00IEND\xaeB`\x82'


def GetLatLong(fn):
    """
    Extract geoinformation (lon, lat, alt) from jpg image.

    :param string fn: image filename
    """
    metadata = pex.ImageMetadata(fn)
    metadata.read()
    Lat = metadata['Exif.GPSInfo.GPSLatitude'].human_value
    if metadata['Exif.GPSInfo.GPSLatitudeRef'].human_value == 'South':
        Lat = '-' + Lat
    Long = metadata['Exif.GPSInfo.GPSLongitude'].human_value
    if metadata['Exif.GPSInfo.GPSLongitudeRef'].human_value == 'West':
        Long = '-' + Long
    Alt = metadata['Exif.GPSInfo.GPSAltitude'].human_value

    # DateTime = metadata['Exif.Image.DateTime'].human_value #string
    if 'Exif.GPSInfo.DateStamp' in metadata.keys():
        DateTime = '%s %s' % (metadata['Exif.GPSInfo.DateStamp'].human_value,
                              metadata['Exif.GPSInfo.TimeStamp'].human_value)
    elif 'Exif.GPSInfo.GPSDateStamp' in metadata.keys():
        DateTime = '%s %s' % (metadata['Exif.GPSInfo.GPSDateStamp'].human_value,
                              metadata['Exif.GPSInfo.GPSTimeStamp'].human_value)
    else:
        pass

    DT = dt.datetime.strptime(DateTime, '%Y:%m:%d %H:%M:%S')  # Datetime object
    return (Lat, Long, Alt, DT)


def FormatLatLong(LatLongString):
    """
    Converts string to float

    """
    print(LatLongString)
    d = LatLongString.find('deg')
    Degrees = float(LatLongString[:d])
    m = LatLongString.find("'")
    Minutes = float(LatLongString[d+4:m])
    s = LatLongString.find('"')
    Seconds = float(LatLongString[m+2:s])
    decCoords = abs(Degrees) + Minutes/60.0 + Seconds/3600.0
    if Degrees < 0:
        decCoords = decCoords * -1
    return decCoords


def create_camera_icon():
    tmpdir = tempfile.mkdtemp()
    iconfilename = os.path.join(tmpdir, 'camera_icon_32x32.png')
    iconfile = open(iconfilename, 'wb')
    iconfile.write(_CAMERA_ICON)
    iconfile.close()
    return iconfilename


def process(path):
    kml = simplekml.Kml()
    iconfilename = create_camera_icon()
    iconpath = kml.addfile(iconfilename)
    for (dirpath, dirnames, filenames) in os.walk(path):
        for filename in sorted(filenames):
            fullpath = os.path.join(dirpath, filename)
            try:
                Lat, Long, Alt, DT = GetLatLong(fullpath)
            except:
                Lat, Long, Alt, DT = (None, None, None, None)
            print '%s: Lat: %s, Long: %s, Alt: %s' % (fullpath, Lat, Long, Alt)
            if Lat:
                try:
                    x, y = (FormatLatLong(Lat), FormatLatLong(Long))
                except:
                    continue
                if x < 0:
                    Lat = Lat.strip('-') + 'S'
                else:
                    Lat = Lat + 'N'
                if y < 0:
                    Long = Long.strip('-') + 'W'
                else:
                    Long = Long + 'E'
                point = kml.newpoint(name=filename, coords=[(y,x)])
                picpath = kml.addfile(fullpath)
                print picpath
                fn = 'files/'+ os.path.splitext(filename)[0] + '.jpg' #Note: will not work if .JPG is used, must be lower case.
                balstylestring = ''
                balstylestring += "<![CDATA[<p><b>Date:</b> " + DT.strftime('%d-%m-%Y')
                balstylestring += ' <b>Time:</b> ' + DT.strftime("%H:%M:%S UTC")
                balstylestring += ' <p><b>Lon:</b> ' + Long + ' <b>Lat:</b> ' + Lat + ' <b>Alt:</b> ' + Alt
                balstylestring += '</p> <table width="500" cellpadding="0" cellspacing="0">  <tbody><tr><td><img width="100%" src="' + fn + '"></td></tr></tbody></table>]]>'
                point.style.balloonstyle.text = balstylestring
                point.style.iconstyle.icon.href='files/camera_icon_32x32.png'

    return kml


def _argparser():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('path', action="store", type=str,
                        help='directory which holds the photographs. All photographs in the directory will be added to the photo album.')
    parser.add_argument('outfile',
                        action="store",
                        type=str,
                        help='outfile name')
    return parser


def main():
    parser = _argparser()
    args = parser.parse_args()
    kml = process(args.path)
    kml.savekmz(args.outfile, format=False)
    sys.stdout.write('Created ... %s. \n' % args.outfile)


if __name__ == '__main__':
    main()
